// flow.js
(function () {
  // URL do socket.io
  var socketIoUrl = 'https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.3.2/socket.io.js';

  /**
   * Função para carregar o script do socket.io de forma assíncrona.
   * @param {string} url - URL do script do socket.io.
   * @param {Function} callback - Callback a ser chamado após o carregamento do script.
   */
  function loadSocketIoScript(url, callback) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.async = true;
    script.onload = callback;
    document.head.appendChild(script);
  }

  // Carregar o script do socket.io de forma assíncrona
  loadSocketIoScript(socketIoUrl, function () {
    // Após o carregamento do socket.io, definir a classe Flow
    /**
     * Classe Flow para gerenciar conexões Socket.IO no cliente.
     */
    function Flow(url, options) {
      this.url = url || 'http://localhost:3000';
      this.options = options || {};
      this.socket = null;
      this.eventListeners = {
        connect: [],
        disconnect: [],
        error: [],
      };
      this.token = null;
    }

    /**
     * Conecta ao servidor Socket.IO com um token opcional.
     * @param {string} [token=null] - Token JWT para autenticação.
     */
    Flow.prototype.connect = function(token) {
      if (token) {
        this.token = token;
        this.url = this.appendTokenToURL(this.url, token);
      }

      this.socket = io(this.url, this.options);

      this.socket.on('connect', this.handleConnect.bind(this));
      this.socket.on('disconnect', this.handleDisconnect.bind(this));
      this.socket.on('error', this.handleError.bind(this));
      this.socket.on('connect_error', this.handleConnectError.bind(this));
    };

    /**
     * Desconecta do servidor Socket.IO.
     */
    Flow.prototype.disconnect = function() {
      if (this.socket) {
        this.socket.disconnect();
        this.clearEventListeners();
      }
    };

    /**
     * Envia uma mensagem para o servidor Socket.IO.
     * @param {string} event - Nome do evento.
     * @param {any} data - Dados a serem enviados.
     */
    Flow.prototype.send = function(event, data) {
      if (this.socket) {
        this.socket.emit(event, data);
      }
    };

    /**
     * Registra um callback para lidar com eventos recebidos do servidor.
     * @param {string} event - Nome do evento.
     * @param {Function} callback - Callback para lidar com os dados recebidos.
     */
    Flow.prototype.receive = function(event, callback) {
      if (this.socket) {
        this.socket.on(event, callback);
      }
    };

    /**
     * Registra um callback para um evento específico.
     * @param {string} event - Nome do evento.
     * @param {Function} callback - Callback a ser chamado quando o evento ocorrer.
     */
    Flow.prototype.on = function(event, callback) {
      if (this.eventListeners[event]) {
        this.eventListeners[event].push(callback);
      }
    };

    /**
     * Remove um callback específico de um evento.
     * @param {string} event - Nome do evento.
     * @param {Function} callback - Callback a ser removido.
     */
    Flow.prototype.off = function(event, callback) {
      if (this.eventListeners[event]) {
        this.eventListeners[event] = this.eventListeners[event].filter(cb => cb !== callback);
      }
    };

    /**
     * Manipula o evento de conexão bem-sucedida.
     */
    Flow.prototype.handleConnect = function() {
      console.log('Connected to server');
      this.triggerEvent('connect');
    };

    /**
     * Manipula o evento de desconexão do servidor.
     */
    Flow.prototype.handleDisconnect = function() {
      console.log('Disconnected from server');
      this.triggerEvent('disconnect');
    };

    /**
     * Manipula o evento de erro de conexão.
     * @param {Error} error - Objeto de erro recebido.
     */
    Flow.prototype.handleError = function(error) {
      console.error('Connection error:', error);
      this.triggerEvent('error', error);
    };

    /**
     * Manipula o evento de erro de conexão e tenta reconectar após um intervalo.
     * @param {Error} error - Objeto de erro recebido.
     */
    Flow.prototype.handleConnectError = function(error) {
      console.error('Connection error, attempting to reconnect:', error);
      setTimeout(() => {
        this.connect(this.token);
      }, 3000); // Tentar reconectar após 3 segundos
    };

    /**
     * Dispara um evento para todos os callbacks registrados para esse evento.
     * @param {string} event - Nome do evento a ser disparado.
     * @param  {...any} args - Argumentos a serem passados para os callbacks.
     */
    Flow.prototype.triggerEvent = function(event, ...args) {
      if (this.eventListeners[event]) {
        this.eventListeners[event].forEach(callback => callback(...args));
      }
    };

    /**
     * Adiciona um token JWT à URL fornecida.
     * @param {string} url - URL original.
     * @param {string} token - Token JWT a ser adicionado.
     * @returns {string} - URL modificada com o token JWT.
     */
    Flow.prototype.appendTokenToURL = function(url, token) {
      const separator = url.includes('?') ? '&' : '?';
      return `${url}${separator}token=${token}`;
    };

    /**
     * Limpa todos os listeners de eventos registrados.
     */
    Flow.prototype.clearEventListeners = function() {
      Object.keys(this.eventListeners).forEach(event => {
        this.eventListeners[event] = [];
      });
    };

    /**
     * Define novas opções para o socket e reconecta com as novas opções.
     * @param {Object} options - Novas opções a serem configuradas para o socket.
     */
    Flow.prototype.setOptions = function(options) {
      this.options = {
        ...this.options,
        ...options
      };

      if (this.socket) {
        this.socket.disconnect();
        this.connect(this.token);
      }
    };

    // Expor Flow globalmente
    window.Flow = Flow;
  });
})();
